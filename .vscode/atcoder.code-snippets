{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"omajinai": {
		"scope": "c",
		"prefix": "omajinai",
		"body": [
			"#include <inttypes.h>",
			"#include <math.h>",
			"#include <stdbool.h>",
			"#include <stdint.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"",
			"int main (void)",
			"{",
			"    intmax_t ${1:N};",
			"    intmax_t ans = 0;",
			"",
			"    scanf(\"%jd$2\", &${3:N});",
			"",
			"    $4",
			"",
			"    printf(\"%jd\\n\", ans);",
			"",
			"    return 0;",
			"}",
			"",
		],
		"description": "おまじない"
	},
	"rep": {
		"scope": "c",
		"prefix": [
			"rep"
		],
		"body": [
			"for (size_t ${1:i} = 0; $1 < ${2:N}; $1++) {",
			"    $3",
			"}"
		],
		"description": "ループ"
	},
	"define min function": {
		"scope": "c",
		"prefix": "min",
		"body": [
			"#define min(a, b) _generic((a), \\",
			"    intmax_t: minj \\",
			"    long double: minlf \\",
			"    default: minj \\",
			"    ) (a, b)",
			"",
			"intmax_t minj (intmax_t x, intmax_t y)",
			"{",
			"    return a < b ? a : b",
			"}",
			"",
			"long double minlf (long double x, long double y)",
			"{",
			"    return a < b ? a : b",
			"}",
		],
		"description": "小さい方を求める関数定義"
	},
	"define max function": {
		"scope": "c",
		"prefix": "max",
		"body": [
			"#define max(a, b) _generic((a), \\",
			"    intmax_t: maxj \\",
			"    long double: maxlf \\",
			"    default: maxj \\",
			"    ) (a, b)",
			"",
			"intmax_t maxj (intmax_t x, intmax_t y)",
			"{",
			"    return a > b ? a : b",
			"}",
			"",
			"long double maxlf (long double x, long double y)",
			"{",
			"    return a > b ? a : b",
			"}",
		],
		"description": "大きい方を求める関数定義"
	},
	"qsort": {
		"scope": "c",
		"prefix": "qsort",
		"body": [
			"qsort(${1:array}, ${2:N}, sizeof($1[0]), ${4:compare});"
		],
		"description": "クイックソート"
	},
	"compare intmax_t asc": {
		"scope": "c",
		"prefix": "compj",
		"body": [
			"int ${1:compare} (const void *a, const void *b)",
			"{",
			"    if(*(intmax_t *)a < *(intmax_t *)b)",
			"        return -1;",
			"    if(*(intmax_t *)a > *(intmax_t *)b)",
			"        return 1;",
			"    return 0;",
			"}"
		],
		"description": "intmax_tの比較関数（小さい方から順に）"
	},
	"compare struct asc": {
		"scope": "c",
		"prefix": "compstr",
		"body": [
			"int ${1:compare} (const void *a, const void *b)",
			"{",
			"    if(((${2:hoge_t} *)a)->$3 < (($2 *)b)->$3)",
			"        return -1;",
			"    if((($2 *)a)->$3 > (($2 *)b)->$3)",
			"        return 1;",
			"    return 0;",
			"}",
		],
		"description": "構造体メンバーの比較関数（小さい方から順に）"
	},
	"compare intmax_t desc": {
		"scope": "c",
		"prefix": "compj",
		"body": [
			"int ${1:compare} (const void *a, const void *b)",
			"{",
			"    if(*(intmax_t *)a < *(intmax_t *)b)",
			"        return 1;",
			"    if(*(intmax_t *)a > *(intmax_t *)b)",
			"        return -1;",
			"    return 0;",
			"}"
		],
		"description": "intmax_tの比較関数（大きい方から順に）"
	},
	"compare struct desc": {
		"scope": "c",
		"prefix": "compstr",
		"body": [
			"int ${1:compare} (const void *a, const void *b)",
			"{",
			"    if(((${2:hoge_t} *)a)->$3 < (($2 *)b)->$3)",
			"        return 1;",
			"    if((($2 *)a)->$3 > (($2 *)b)->$3)",
			"        return -1;",
			"    return 0;",
			"}",
		],
		"description": "構造体メンバーの比較関数（大きい方から順に）"
	},
	"gcd": {
		"scope": "c",
		"prefix": [
			"gcd"
		],
		"body": [
			"intmax_t gcd(intmax_t a, intmax_t b)",
			"{",
			"    while (b != 0) {",
			"        intmax_t r = a % b;",
			"        a = b;",
			"        b = r;",
			"    }",
			"    return a;",
			"}"
		],
		"description": "最大公約数"
	},
	"lcm": {
		"scope": "c",
		"prefix": [
			"lcm"
		],
		"body": [
			"intmax_t lcm(intmax_t a, intmax_t b)",
			"{",
			"    intmax_t g = a, b_ = b;",
			"    while (b_ != 0) {",
			"        intmax_t r = g % b_;",
			"        g = b_;",
			"        b_ = r;",
			"    }",
			"    return a / g * b;",
			"}"
		],
		"description": "最小公倍数"
	},
	"next_permutation": {
		"scope": "c",
		"prefix": "permutation",
		"body": [
			"void swap(void *src, void *dst, size_t size)",
			"{",
			"    char tmp;",
			"    char *sp = (char *)src;",
			"    char *dp = (char *)dst;",
			"",
			"    do {",
			"        tmp = *sp;",
			"        *sp++ = *dp;",
			"        *dp++ = tmp;",
			"    } while (--size);",
			"}",
			"",
			"void reverse(void *base, size_t nmemb, size_t size)",
			"{",
			"    char *first = (char *)base;",
			"    char *last = (char *)base + (nmemb - 1) * size;",
			"",
			"    if (nmemb == 0)",
			"        return;",
			"",
			"    for (; first < last; first += size, last -= size) {",
			"        swap(first, last, size);",
			"    }",
			"}",
			"",
			"_Bool next_permutation(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *))",
			"{",
			"    char *first = (char *)base;",
			"    char *last = (char *)base + (nmemb - 1) * size;",
			"    char *i = last;",
			"",
			"    for (;;) {",
			"        i -= size;",
			"        if (compar(i, i + size) < 0) {",
			"            char *j = last;",
			"            while (compar(i, j) >= 0) {",
			"                j -= size;",
			"            }",
			"            swap(i, j, size);",
			"            reverse(i + size, (last - i) / size, size);",
			"            return 1;",
			"        }",
			"        if (i == first) {",
			"            reverse(base, nmemb, size);",
			"            return 0;",
			"        }",
			"    }",
			"}",
			""
		],
		"description": "次の順列を求める"
	},
	"debug printf": {
		"scope": "c",
		"prefix": "debug",
		"body": [
			"fprintf(stderr, $1);"
		],
		"description": "標準エラー出力にprint"
	},
}